<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hzscoder&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-24T07:59:27.988Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hzscoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android子线程更新UI方法整理</title>
    <link href="http://yoursite.com/2018/11/24/Android%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0UI%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2018/11/24/Android子线程更新UI方法整理/</id>
    <published>2018-11-24T07:55:04.340Z</published>
    <updated>2018-11-24T07:59:27.988Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Android子线程更新UI不是安全的"><a href="#Android子线程更新UI不是安全的" class="headerlink" title="Android子线程更新UI不是安全的"></a>Android子线程更新UI不是安全的</h4><p>Android的UI访问是没有加锁的，这样在多个线程访问UI是不安全的。<br>Android中采用消息机制在处理多线程更新UI操作。</p><p>我觉得比较简易的主要有View.post() Handler.post() Activity.runOnUiThread()方法。</p><p>另外可行的还有handler.sendMessage()方法以及AsyncTask。<br>不过这两个方法定义为内部类的话，需要定义为静态内部类并保持对它外部类的弱引用，<br>否则有可能会造成内存泄露。然这样又会复杂化代码。</p><p>所以本人觉得比较简单可行是上面的三种方法。</p><p>代码如下(布局文件中只有三个按钮):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button button2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button button1 = findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        button2=findViewById(R.id.button2);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        Button button3 = findViewById(R.id.button3);</span><br><span class="line">        button3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">switch</span>(v.getId())&#123;</span><br><span class="line">           <span class="keyword">case</span> R.id.button1:</span><br><span class="line">               <span class="comment">//通过Handler.post方法</span></span><br><span class="line">               <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       Handler handler=<span class="keyword">new</span> Handler(Looper.getMainLooper());</span><br><span class="line">                       handler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                           <span class="meta">@Override</span></span><br><span class="line">                           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                               String str=<span class="string">"通过Handler.post方法更新UI成功"</span>;</span><br><span class="line">                               Toast.makeText(MainActivity.<span class="keyword">this</span>,str,Toast.LENGTH_SHORT).show();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;).start();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.button2:</span><br><span class="line">               <span class="comment">//通过View.post方法</span></span><br><span class="line">               <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       button2.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                           <span class="meta">@Override</span></span><br><span class="line">                           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                               String str=<span class="string">"通过View.post方法更新UI成功"</span>;</span><br><span class="line">                               Toast.makeText(MainActivity.<span class="keyword">this</span>,str,Toast.LENGTH_SHORT).show();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;).start();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> R.id.button3:</span><br><span class="line">               <span class="comment">//通过Activity.runOnUiThread方法</span></span><br><span class="line">               <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                       runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                           <span class="meta">@Override</span></span><br><span class="line">                           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                               String str=<span class="string">"通过runOnUiThread方法更新UI成功"</span>;</span><br><span class="line">                               Toast.makeText(MainActivity.<span class="keyword">this</span>,str,Toast.LENGTH_SHORT).show();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;).start();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">default</span>:</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注:发送Toast消息也算更新UI。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Android子线程更新UI不是安全的&quot;&gt;&lt;a href=&quot;#Android子线程更新UI不是安全的&quot; class=&quot;headerlink&quot; title=&quot;Android子线程更新UI不是安全的&quot;&gt;&lt;/a&gt;Android子线程更新UI不是安全的&lt;/h4&gt;&lt;p&gt;An
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android主活动onCreate函数创建子线程更新UI成功问题</title>
    <link href="http://yoursite.com/2018/11/23/Android%E4%B8%BB%E6%B4%BB%E5%8A%A8onCreate%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E5%AD%90%E7%BA%BF%E7%A8%8B%E6%9B%B4%E6%96%B0UI%E6%88%90%E5%8A%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/11/23/Android主活动onCreate函数创建子线程更新UI成功问题/</id>
    <published>2018-11-23T08:08:16.186Z</published>
    <updated>2018-11-24T07:58:41.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主活动onCreate函数直接创建子线程更新UI成功"><a href="#主活动onCreate函数直接创建子线程更新UI成功" class="headerlink" title="主活动onCreate函数直接创建子线程更新UI成功"></a>主活动onCreate函数直接创建子线程更新UI成功</h3><p>首先，直接在子线程中更新UI。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> TextView textView=findViewById(R.id.textView);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                textView.setText(<span class="string">"hello"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：布局文件中只有一个TextView</p><p>发现”hello”成功显示在TextView中。说明子线程更新UI成功。</p><p>然后我让子线程休息200ms后再进行更新，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> TextView textView=findViewById(R.id.textView);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                textView.setText(<span class="string">"hello"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发现TextView上并没有显示”hello”,说明子线程不能更新UI。是不是很奇怪？</p><p>原因是当访问UI时，ViewRoot的实现类ViewRootImpl会调用checkThread方法去检查当前访问UI的线程是哪个，如果不是UI线程则会抛出异常，更新UI失败。而第一次是我们直接在MainActivity的入口函数onCreate里面直接创建子线程跟新UI，这时候ViewRootImpl还来不及没有创建，以至于无法检查当前线程是否是主线程。</p><p>详细原因请见<a href="https://www.cnblogs.com/xuyinhuan/p/5930287.html" target="_blank" rel="noopener">Android中子线程真的不能更新UI吗?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主活动onCreate函数直接创建子线程更新UI成功&quot;&gt;&lt;a href=&quot;#主活动onCreate函数直接创建子线程更新UI成功&quot; class=&quot;headerlink&quot; title=&quot;主活动onCreate函数直接创建子线程更新UI成功&quot;&gt;&lt;/a&gt;主活动onCre
      
    
    </summary>
    
    
  </entry>
  
</feed>
